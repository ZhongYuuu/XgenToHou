// ===========================================================================
// Copyright 2021 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
// ===========================================================================
// Copyright 2015 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================


//    Description:    initializes the custom width brush setting values
//
//    Input Arguments:
//        parent    Parent layout of the custom width brush settings layout.
//                  Required so that UI object names can be successfully resolved
//        tool      this is the name of the instance of the tool
//                    that the property sheet is modifying.
//
//    Return Value:
//        None.
//
global proc xgmWidthBrushSettingsValues(string $parent, string $tool)
{
    global string $gXgmWidthBrushCmd;

    setParent $parent;

    separator -e -visible 0 xgmBrushCollisionSEP;
    checkBoxGrp -e -visible 0 xgmBrushCollisionGRP;
    floatSliderGrp -e -visible 0 xgmBrushCollisionDistanceFSG;

    int $globalSel = eval ( $gXgmWidthBrushCmd + " -q -globalSelection " + $tool );
    if($globalSel) {
        radioButtonGrp -e -select 1 xgmWidthBrushBrushModeRBG;
    } else {
        radioButtonGrp -e -select 2 xgmWidthBrushBrushModeRBG;
    }

    float $increment = eval( $gXgmWidthBrushCmd + " -q -increment " + $tool );
    floatSliderGrp -e -value $increment xgmWidthBrushIncrementFSG;

    float $minWidth = eval( $gXgmWidthBrushCmd + " -q -minWidth " + $tool );
    floatSliderGrp -e -value $minWidth xgmWidthBrushMinWidthFSG;

    float $maxWidth = eval( $gXgmWidthBrushCmd + " -q -maxWidth " + $tool );
    floatSliderGrp -e -value $maxWidth xgmWidthBrushMaxWidthFSG;
}

//    Description:    initializes the custom width brush faloff values
//
//    Input Arguments:
//        parent    Parent layout of the custom width brush settings layout.
//                  Required so that UI object names can be successfully resolved
//        tool      this is the name of the instance of the tool
//                    that the property sheet is modifying.
//
//    Return Value:
//        None.
//
global proc xgmWidthBrushFalloffValues(string $parent, string $tool)
{
    global string $gXgmWidthBrushCmd;

    setParent $parent;
}

//
//    Description:    initializes widthBrushContext tool property sheet values
//
//    Input Arguments:
//        tool      this is the name of the instance of the tool
//                    that the property sheet is modifying.
//
//    Return Value:
//        None.
//
global proc xgmWidthBrushValues(string $tool)
{
    global string $gXgmWidthBrushLayout;
    global string $gXgmWidthBrushCmd;
    global string $gXgmWidthBrushSettingFrame;
    global string $gXgmWidthBrushFalloffFrame;
    global string $gXgmWidthRootToTipFalloffFrame;
    global string $gXgmWidthBrushDisplaySettingFrame;
    global string $gXgmWidthBrushSymmetrySettingFrame;
    global string $gXgmWidthBrushFalloffTypes;

    string $parent = `toolPropertyWindow -q -location`;
    setParent $parent;

    frameLayout -e -en true $gXgmWidthBrushSettingFrame;
    frameLayout -e -en true $gXgmWidthBrushFalloffFrame;
    frameLayout -e -en true $gXgmWidthRootToTipFalloffFrame;
    frameLayout -e -en true $gXgmWidthBrushDisplaySettingFrame;

    string $settingsCustom = "xgmWidthBrushSettingsValues( \"" + $gXgmWidthBrushLayout + "\", \"" + $tool + "\")";
    string $falloffCustom = "xgmWidthBrushFalloffValues( \"" + $gXgmWidthBrushLayout + "\", \"" + $tool + "\")";
    xgmBrushSettingsValues( $gXgmWidthBrushSettingFrame, $gXgmWidthBrushCmd, $tool, $settingsCustom );
    xgmBrushFalloffValues( $gXgmWidthBrushFalloffFrame, $gXgmWidthBrushCmd, $tool, $falloffCustom, $gXgmWidthBrushFalloffTypes );
    xgmRootToTipFalloffValues( $gXgmWidthRootToTipFalloffFrame, $gXgmWidthBrushCmd, $tool, "" );
    xgmBrushDisplaySettingsValues( $gXgmWidthBrushDisplaySettingFrame, $gXgmWidthBrushCmd, $tool, "" );
    xgmBrushSymmetrySettingsValues( $gXgmWidthBrushSymmetrySettingFrame, $gXgmWidthBrushCmd, $tool, "" );

    string $help = "WidthBrushTool";
    toolPropertySetCommon $tool "xgmWidthBrushTool.xpm" $help;

    toolPropertySelect $gXgmWidthBrushLayout;

    string $nameField = `toolPropertyWindow -query -field`;
    text -edit -label (uiRes("m_xgmWidthBrushValues.kWidthBrushToolName")) $nameField;
}
