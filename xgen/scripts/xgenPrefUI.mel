// ===========================================================================
// Copyright 2021 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Description:
//	  Create the preference tab for XGen plugin
//

global proc prefsUpdateXGen()
{
	global string $gPreferenceWindow;
	setParent $gPreferenceWindow;
	string $parent = "xgenPref";
	
	if (`columnLayout -q -numberOfChildren $parent` == 0) {
		return;
	}

	setParent $parent;
	intFieldGrp -e -value1 `optionVar -q xgenXPDCacheSize` xpdCacheSizeCtrl;
	radioButtonGrp -e -select `optionVar -q xgenIsPtexCacheSizePerThread` ptexCacheSizePerThreadCtrl;
	intFieldGrp -e -value1 `optionVar -q xgenPtexCacheSize` ptexCacheSizeCtrl;
	floatSliderGrp -e -value `optionVar -q xgenPtexCacheSizeThreadScale` ptexCacheSizeThreadScaleCtrl;

	optionMenuGrp -e -select `optionVar -query xgenVP2DrawMethod` vp2DrawMethodMenu;

    checkBoxGrp -e -value1 `optionVar -query xgenThreadingGen` threadingGenCbg;
}

global proc xgenCacheChanged()
{
	int $value;
	if (`intFieldGrp -exists xpdCacheSizeCtrl`) {
		$value = `intFieldGrp -q -value1 xpdCacheSizeCtrl`;
		if ($value > 0) {
			optionVar -iv xgenXPDCacheSize $value;
		}
		else {
			optionVar -iv xgenXPDCacheSize 0;
		}
	}

	if (`radioButtonGrp -exists ptexCacheSizePerThreadCtrl`) {
		$value = `radioButtonGrp -q -sl ptexCacheSizePerThreadCtrl`;
		optionVar -iv xgenIsPtexCacheSizePerThread $value;
	}

	if (`intFieldGrp -exists ptexCacheSizeCtrl`) {
		$value = `intFieldGrp -q -value1 ptexCacheSizeCtrl`;
		if ($value > 0) {
			optionVar -iv xgenPtexCacheSize $value;
		}
		else {
			optionVar -iv xgenPtexCacheSize 0;
		}
	}

	if (`floatSliderGrp -exists ptexCacheSizeThreadScaleCtrl`) {
		float $fValue = `floatSliderGrp -q -v ptexCacheSizeThreadScaleCtrl`;
		optionVar -fv xgenPtexCacheSizeThreadScale $fValue;
	}
}

global proc xgenUpdateVP2DrawMethod()
{
	int $oldMethod = 1; // default
	if(`optionVar -exists xgenVP2DrawMethod`)
	{
		 $oldMethod = `optionVar -q xgenVP2DrawMethod`;
	}

	int $newMethod = $oldMethod;
	if ( `optionMenuGrp -exists vp2DrawMethodMenu` )
	{
		$newMethod = `optionMenuGrp -query -select vp2DrawMethodMenu`;
	}

	if($newMethod != $oldMethod)
	{
		confirmDialog -title (uiRes("m_xgenPrefUI.kVPTwoMethodChangeTitle"))
			-messageAlign "left"
			-message (uiRes("m_xgenPrefUI.kVPTwoMethodChangeMessage"))
			-button (uiRes("m_xgenPrefUI.kOKitem"));
	}

	optionVar -iv xgenVP2DrawMethod $newMethod;
}

global proc xgenThreadingGenChanged()
{
    if (`checkBoxGrp -exists threadingGenCbg`)
    {
        int $state = `checkBoxGrp -q -value1 threadingGenCbg`;
        if ($state)
            python("xg.setAttr('Multithreading', '1', 'pal')");
        else
            python("xg.setAttr('Multithreading', '0', 'pal')");
        optionVar -iv xgenThreadingGen $state;
    }
}

global proc prefsHoldCurrentStateXGen(string $mode)
{
	xgenCacheChanged();
	xgenUpdateVP2DrawMethod();
    xgenThreadingGenChanged();

    string $xgenOptionVars[] = {
		"xgenXPDCacheSize",
		"xgenIsPtexCacheSizePerThread",
		"xgenPtexCacheSize",
		"xgenPtexCacheSizeThreadScale",
		"xgenVP2DrawMethod",
        "xgenThreadingGen"
    };
    prefsHoldOptionVars($xgenOptionVars, $mode);

	if ($mode == "remove") {
		// Finalize preference changes into XGen
		string $isPerThread = `optionVar -q xgenIsPtexCacheSizePerThread`;
		if ($isPerThread == 1) {
			xgmCache -xpd `optionVar -q xgenXPDCacheSize` -ptx `optionVar -q xgenPtexCacheSize` -pts `optionVar -q xgenPtexCacheSizeThreadScale` -ppt;
		} else {
			xgmCache -xpd `optionVar -q xgenXPDCacheSize` -ptx `optionVar -q xgenPtexCacheSize` -pts `optionVar -q xgenPtexCacheSizeThreadScale`;
		}
		optionVar -remove "xgenVP2DrawMethodHold";

        optionVar -remove "xgenThreadingGenHold";
	}

	global string $gPreferenceWindow;
	if (`window -exists $gPreferenceWindow`) {
		setParent xgenPref;
		if (`intFieldGrp -exists xpdCacheSizeCtrl`) {
			intFieldGrp -e -value1 `optionVar -q xgenXPDCacheSize` xpdCacheSizeCtrl;
			radioButtonGrp -e -select `optionVar -q xgenIsPtexCacheSizePerThread` ptexCacheSizePerThreadCtrl;
			intFieldGrp -e -value1 `optionVar -q xgenPtexCacheSize` ptexCacheSizeCtrl;
			floatSliderGrp -e -value `optionVar -q xgenPtexCacheSizeThreadScale` ptexCacheSizeThreadScaleCtrl;
		}

		if (`optionMenuGrp -exists vp2DrawMethodMenu`) {
			optionMenuGrp -e -select `optionVar -query xgenVP2DrawMethod` vp2DrawMethodMenu;
		}

        if (`checkBoxGrp -exists threadingGenCbg`) {
			checkBoxGrp -e -value1 `optionVar -query xgenThreadingGen` threadingGenCbg;
		}
	}
}

global proc prefsSetOptVarToDefault()
{
	// cache sizes in MB
	optionVar -iv xgenXPDCacheSize 100;
	optionVar -iv xgenIsPtexCacheSizePerThread 2;
	optionVar -iv xgenPtexCacheSize 500;
	optionVar -fv xgenPtexCacheSizeThreadScale 1.0;
	
	xgmCache -ptx 100 -xpd 500 -pts 1.0;

	optionVar -iv xgenVP2DrawMethod 1;

    optionVar -iv "xgenThreadingGen" 1;
}

global proc prefsCreateXGen()
{
	global string $gPreferenceWindow;
	setParent $gPreferenceWindow;
	string $parent = "xgenPref";
	string $label1 = "Ptex Cache Size is ";
	string $label2 = "Size Thread Scale";

	//	 Check to see if this has been created already.
	//	
	if (`columnLayout -q -numberOfChildren $parent` > 0) {
		return;
	}
	//	  Create the UI
	//
	setParent $parent;
	setUITemplate -pushTemplate prefsTemplate;

	//	 This is used to force the width to fill the window
	separator -style "none" -h 1;

	frameLayout -label (uiRes("m_xgenPrefUI.kXGenCacheOptions"));
		columnLayout -adj true;
		intFieldGrp
			-label (uiRes("m_xgenPrefUI.kXGenXPDLable"))
			-extraLabel (uiRes("m_xgenPrefUI.kXGenMegaBytes1"))
			-changeCommand xgenIntFieldsChanged
			xpdCacheSizeCtrl;
		radioButtonGrp 
			-nrb 2 
			-label $label1 
			-labelArray2 "Each Thread" "Shared by All Threads"
			-on1 xgenCacheChanged 
			-on2 xgenCacheChanged
			-select 2
			ptexCacheSizePerThreadCtrl;
		intFieldGrp
			-label $label1
			-extraLabel (uiRes("m_xgenPrefUI.kXGenMegaBytes2"))
			-changeCommand xgenCacheChanged
			ptexCacheSizeCtrl;
		floatSliderGrp
			-label $label2
			-field true
			-min 0.0
			-max 1.0
			-changeCommand xgenCacheChanged
			ptexCacheSizeThreadScaleCtrl;
		text -align "left" (uiRes("m_xgenPrefUI.kXGenCacheNotice"));

    setParent $parent;
	frameLayout -label (uiRes("m_xgenPrefUI.kXGenVPTwoOptions"));
		columnLayout -adj true;
		optionMenuGrp
			-columnWidth 1 138
			-label (uiRes("m_xgenPrefUI.kVPTwoDrawMethod"))
			-annotation (uiRes("m_xgenPrefUI.kVPTwoDrawMethodAnnot"))
			-changeCommand xgenUpdateVP2DrawMethod
			vp2DrawMethodMenu;

			menuItem -label (uiRes("m_xgenPrefUI.kVPTwoDrawHWInstance"));
			menuItem -label (uiRes("m_xgenPrefUI.kVPTwoDrawLegacy"));

	setParent $parent;
    frameLayout -label (uiRes("m_xgenPrefUI.kXGenThreadingOptions"));
		columnLayout -adj true;
		checkBoxGrp -ncb 1
			-label ""
			-label1 (uiRes("m_xgenPrefUI.kMultithreading"))
			threadingGenCbg;

    setParent $parent;
	setUITemplate -popTemplate;

	prefsUpdateXGen();
}

global proc prefsFrameLayoutCreateXGen()
{
	frameLayout -labelVisible false -borderVisible false -marginWidth 10 -marginHeight 10;
		columnLayout -adj true xgenPref;
}

global proc registerXGenPrefTab()
{
	// register the preference tab
	addCustomPrefsTab("prefsCreateXGen",
		"prefsFrameLayoutCreateXGen",
		"prefsUpdateXGen",
		"prefsHoldCurrentStateXGen",
		"prefsSetOptVarToDefault",
		(uiRes("m_xgenPrefUI.kXGenPrefTitle")),
		(uiRes("m_xgenPrefUI.kXGenPrefTab")));

	if (`optionVar -exists xgenXPDCacheSize` && !`optionVar -exists xgenPtexCacheSizeThreadScale`) {
		optionVar -iv xgenIsPtexCacheSizePerThread 2;
		optionVar -fv xgenPtexCacheSizeThreadScale 1.0;
	}

	if (!`optionVar -exists xgenXPDCacheSize`) {
		prefsSetOptVarToDefault();
	}
	else {
		xgmCache -xpd `optionVar -q xgenXPDCacheSize` -ptx `optionVar -q xgenPtexCacheSize` -pts `optionVar -q xgenPtexCacheSizeThreadScale`;
		if (`optionVar -query xgenThreadingGen`)
			python("xg.setAttr('Multithreading', '1' , 'pal')");
		else
			python("xg.setAttr('Multithreading', '0' , 'pal')");
	}
}

global proc unregisterXGenPrefTab()
{
	// unregister the preference tab
	deleteCustomPrefsTab("prefsCreateXGen");
}
