<!--
Copyright 2015 Autodesk, Inc. All rights reserved.

Use of this software is subject to the terms of the Autodesk
license agreement provided at the time of installation or download,
or which otherwise accompanies this software in either electronic
or hard copy form.
-->
<fragment uiName="xgenFacingCameraVSToGSVw" name="xgenFacingCameraVSToGSVw" type="interpolant" class="ShadeFragment" version="1.0" feature_level="0" >
    <description>
        <![CDATA[
XGen face camera spline view vector generator]]>
    </description>
    <properties>
        <float3   name="Pm"                     semantic="Pm"         flags="varyingInputParam" />
        <float4x4 name="world"                  semantic="world" />
        <float3   name="worldCameraPosition"    semantic="worldcameraposition" />
    </properties>
    <values>
    </values>
    <outputs>
        <float3 name="Vw" />
    </outputs>
    <implementation>
        <implementation render="OGSRenderer" language="Cg" lang_version="2.100000" >
            <function_name val="xgenFacingCameraVSToGSVw" />
            <vertex_source>
                <![CDATA[
float3 ixgenFacingCameraVSToGSVw(float3 Pm, float4x4 world, float3 worldCameraPosition)
{
    // Get vector from vertex to camera
    return normalize(worldCameraPosition - mul(world, float4(Pm, 1.0f)).xyz);
}
                ]]>
            </vertex_source>
            <source>
                <![CDATA[
float3 xgenFacingCameraVSToGSVw(float3 iVw)
{
    return normalize(iVw);
}
                ]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="GLSL" lang_version="3.000000" >
            <function_name val="xgenFacingCameraVSToGSVw" />
            <vertex_source>
                <![CDATA[
vec3 ixgenFacingCameraVSToGSVw(vec3 Pm, mat4 world, vec3 worldCameraPosition)
{
    // Get vector from vertex to camera
    return normalize(worldCameraPosition - mul(world, vec4(Pm, 1.0f)).xyz);
}
                ]]>
            </vertex_source>
            <source>
                <![CDATA[
vec3 xgenFacingCameraVSToGSVw(vec3 iVw)
{
    return normalize(iVw);
}
                ]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="HLSL" lang_version="11.000000" >
            <function_name val="xgenFacingCameraVSToGSVw" />
            <vertex_source>
                <![CDATA[
float3 ixgenFacingCameraVSToGSVw(float3 Pm, float4x4 world, float3 worldCameraPosition)
{
    // Get vector from vertex to camera
    return normalize(worldCameraPosition - mul(float4(Pm, 1.0f), world).xyz);
}
                ]]>
            </vertex_source>
            <source>
                <![CDATA[
float3 xgenFacingCameraVSToGSVw(float3 iVw)
{
    return normalize(iVw);
}
                ]]>
            </source>
        </implementation>
    </implementation>
</fragment>

